---
title: "Reshaping"
---

```{r}
library(tidyverse)
library(ggplot2)
library(tidyr)
```

Exercise 1: What’s the problem?

```{r}
sleep_wide <- read.csv("https://mac-stat.github.io/data/sleep_wide.csv")

head(sleep_wide)
```

Part a
What are the units of observation in sleep_wide?

*Subject/Person*

Part b
Suppose I ask you to plot each subject’s reaction time (y-axis) vs the number of days of sleep restriction (x-axis). “Sketch” out in words what the first few rows of the data need to look like in order to do this. It might help to think about what you’d need to complete the plotting frame:

ggplot(___, aes(y = ___, x = ___, color = ___))

*We would have to create a day column and reaction time column - we are going from wide data to long. We would have to use pivot_longer()*

Part c

```{r}
sleep_wide |>
  pivot_longer(cols = c(day_0, day_1, day_2, day_3, day_4, day_5, day_6, day_7, day_8),
               names_to = "Day",
               values_to = "Reaction Time",
               names_prefix = "day_")
```

Exercise 2: Pivot longer

Part a

```{r}
sleep_wide |>
  pivot_longer(cols = c(-Subject),
               names_to = "Day",
               values_to = "Reaction Time",
               names_prefix = "day_") |>
  head(3)
```
Part b

```{r}
sleep_long <- sleep_wide |>
  pivot_longer(cols = -Subject,
               names_to = "day",
               names_prefix = "day_",
               values_to = "reaction_time")

head(sleep_long)
```
Part c
Using sleep_long, construct a line plot of reaction time vs day for each subject. This will look goofy no matter what you do. Why? HINT: look back at head(sleep_long). What class or type of variables are Subject and day? What do we want them to be?

```{r}
ggplot(sleep_long, aes(x=day, y=reaction_time)) +
  geom_line()+
  labs(title = "Reaction time vs Day per Subject",
       x= "Day",
       y= "Reaction Time(s)")
str(sleep_long)
```
Subject is numerical
Day is categorical but we want it to be numerical

Exercise 3: Changing variable classes & plotting

```{r}
sleep_long <- sleep_wide |>
  pivot_longer(cols = -Subject,
               names_to = "day",
               names_prefix = "day_",
               values_to = "reaction_time") |> 
  mutate(Subject = as.factor(Subject), day = as.numeric(day))

# Check it out
# Same data, different class
head(sleep_long)
```

Part a

```{r}
# Make a line plot of reaction time by day for each subject
# Put these all on separate frames (one per subject)
ggplot(sleep_long, aes(x=day, y= reaction_time, color = Subject)) +
  facet_wrap(~Subject)+
  geom_line()
```
```{r}
# Make a line plot of reaction time by day for each subject
# Put these all on the same frame
ggplot(sleep_long, aes(x=day, y= reaction_time, color = Subject)) +
  geom_line()
```
Exercise 4: Pivot wider

```{r}
sleep_long |>
  pivot_wider(names_from = day, values_from = reaction_time) |>
  head()
```
Days are labelled as just the number and not Day 0, Day 1, etc.

```{r}
sleep_long |>
  pivot_wider(names_from = day, values_from =reaction_time, names_prefix = "Day_") |>
  head()
```

Exercise 5: Practice with Billboard charts

```{r}
# Load data
library(tidyr)
data("billboard")

# Check it out
head(billboard)
```

Part a

```{r}
ggplot(billboard, aes(y = wk2, x=wk1))+
  geom_point(alpha = 0.5)+
  labs(title = "Comparing Billboard Rankings in Week 2 vs 1",
       x= "Billboark Ranking at Week 1",
       y= "Billboard Ranking at Week 2")+
  geom_abline(intercept = 0, slope = 1) #songs above this line improved their rankings from the 1st to 2nd week 
```
Part b

```{r}
billboard |>
  filter(wk2>wk1) |>
  ggplot(aes(y = wk2, x=wk1)) +
  geom_point(alpha = 0.5) +
  labs(title = "Comparing Billboard Rankings in Week 2 vs 1",
       x= "Billboark Ranking at Week 1",
       y= "Billboard Ranking at Week 2")+
  geom_abline(intercept = 0, slope = 1)

```

Part c

```{r}
# Define nov_1999

nov_1999 <- billboard |>
  filter(date.entered== "1999-11-06") |>
  select(-track,- date.entered)
  
# Confirm that nov_1999 has 2 rows (songs) and 77 columns
dim(nov_1999)
  
```

Part d

```{r}
#visualization of the rankings (y-axis) over time (x-axis) for the 2 songs in nov_1999.
nov_1999 |> 
  pivot_longer(cols = -artist, names_to = "week", names_prefix = "wk", values_to = "ranking") |> 
  mutate(week = as.numeric(week)) |> 
  ggplot(aes(y = ranking, x = week, color = artist)) + 
    geom_line()
  
```


Exercise 6: Practice with the Daily Show

```{r}
install.packages('fivethirtyeightdata', repos =
'https://fivethirtyeightdata.github.io/drat/', type = 'source')

library(fivethirtyeight)
data("daily_show_guests")
daily <- daily_show_guests
```


Part a

```{r}
daily |> 
  count(raw_guest_list) |> 
  arrange(desc(n)) |> 
  head(15)
```

Part b

```{r}
daily |> 
  count(year, raw_guest_list) |> 
  group_by(raw_guest_list) |> 
  mutate(total = sum(n)) |>
  pivot_wider(names_from = year, 
              values_from = n,
              values_fill = 0) |> 
  arrange(desc(total)) |> 
  head(15)
```

Part c
```{r}
daily |> 
  count(group)
```
```{r}
plot_data <- daily |> 
  mutate(broad_group = case_when(
    group %in% c("Acting", "Athletics", "Comedy", "Musician") ~ "Acting, Comedy & Music",
    group %in% c("Media", "media", "Science", "Academic", "Consultant", "Clergy") ~ "Media",
    group %in% c("Politician", "Political Aide", "Government", "Military", "Business", "Advocacy") ~ "Government and Politics",
    .default = NA
  )) |> 
  filter(!is.na(broad_group))
```

```{r}
plot_data |>
  group_by(year, broad_group) |>
  summarise(n = n()) |>
  mutate(freq = n / sum(n)) |> 
  ggplot(aes(y = freq, x = year, color = broad_group)) + 
    geom_line()
```

